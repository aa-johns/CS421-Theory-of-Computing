#include<iostream>
#include<stdlib.h>
#include<fstream>
//#include"stack.h"  // ** can be removed
#include<vector>
#include<string>
using namespace std;

//---------------------------------------
// CS421 File ll1.cpp for HW3A
// Your name: **
//---------------------------------------

// ** Complete this to fit the HW3A specification - look for **
// ** Must have the same types of tracing couts as my demo program.
// ** Feel free to use your stack.h and stack.cpp or use vectors

// Global variables
vector<char> M[3][5];  // the table of rules
vector<char> stack; // global stack to store current rules

// Method to read rules into matrix Machine
void readrules()
{
  ifstream fin("rules", ios::in);
  // ** read in the rules into M, make sure $ is not stored

  char nt, x;   // nt is the char for non-terminal, x for the first char after nt
  int row = 0;  // row of rule in matrix
  int col = 0;  // column of rule in matrix
  int charpos = 1; // char position in line
  string line;     // read the file line by line
  vector<char> temp; // temp vector to hold the rule

  while (getline(fin, line)) { // read the file line by line

    //determine the row of a rule
    nt = line[0]; // get the char for non-terminal 
    switch (nt) {
    case 'S': row = 0; break; // if char is S
    case 'A': row = 1; break; // if char is A
    case 'B': row = 2; break; // if char is B
    }

    // read the char after nt one by one and put into temp
    while (line[charpos] != '\0') { 
      if (line[charpos] != '$' && line[charpos] != ' ') {
	// if the char is valid one, add to the vector
	temp.push_back(line[charpos]);
      }
      charpos++;
    }

    //determine the column of the rule
    x = temp[0]; // get the char after nt
    if (x == 'S') col = 0;
    else if (x == 'A') col = 1;
    else if (x == 'B') col = 2;
    else if (x == '0') col = 3;
    else if (x == '1') col = 4;
    M[row][col] = temp; // add temp vector to this position in Matrix 
    temp.clear(); // empty the temp
    charpos = 1; // reset the charpos for next linse
  }

  // ** display the table
  char rows[] = { 'S','A','B' };
  char cols[] = { 'S','A','B','0','1' };
  int index;
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 5; j++) {
      cout << "row " << rows[i] << " col " << cols[j] << " :";
      for (index = 0; index < M[i][j].size(); index++) {
	cout << M[i][j].at(index) << " ";
      }
      cout << endl;
    }
  }
}

// Method to display a stack
void display(vector<char> V)
{   
  //if a stack is empty
  if (V.empty()) {
    cout << "[ Empty ]" << endl;
  }
  else {
    for (int i = V.size() - 1; i >= 0; i--) {
      cout << V.at(i) << endl;
    }
  }
}

// Method to add rules into global stack
void addtostack(vector<char> V)
{
  cout << "Adding rhs of a rule to the stack" << endl << endl;
  // ** push V contents to the stack - be careful of the order
  int index;
  // push from end to begin of V, to make sure begin of V is the top of the stack
  for (index = V.size() - 1; index >= 0; index--) {
    stack.push_back(V[index]);
  }
}

// Main function
int main()
{

}
